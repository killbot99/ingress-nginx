I0311 12:55:11.775885       9 nginx.go:344] "Event received" type=UPDATE object="&Service{ObjectMeta:{service1  testing  b6bea82a-b376-4038-9735-bc1239457c7b 133419 0 2022-03-07 09:50:16 +0000 UTC <nil> <nil> map[app:service1] map[kubectl.kubernetes.io/last-applied-configuration:{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"labels\":{\"app\":\"service1\"},\"name\":\"service1\",\"namespace\":\"testing\"},\"spec\":{\"ports\":[{\"name\":\"80-80\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80}],\"selector\":{\"app\":\"pod2\"},\"type\":\"ClusterIP\"},\"status\":{\"loadBalancer\":{}}}\n] [] []  [{kubectl-client-side-apply Update v1 2022-03-07 10:00:04 +0000 UTC FieldsV1 {\"f:metadata\":{\"f:annotations\":{\".\":{},\"f:kubectl.kubernetes.io/last-applied-configuration\":{}},\"f:labels\":{\".\":{},\"f:app\":{}}},\"f:spec\":{\"f:sessionAffinity\":{}}} } {kubectl-edit Update v1 2022-03-11 12:55:11 +0000 UTC FieldsV1 {\"f:spec\":{\"f:ports\":{\".\":{},\"k:{\\\"port\\\":80,\\\"protocol\\\":\\\"TCP\\\"}\":{\".\":{},\"f:name\":{},\"f:port\":{},\"f:protocol\":{},\"f:targetPort\":{}}},\"f:selector\":{\".\":{},\"f:app\":{}},\"f:type\":{}}} }]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:80-80,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{app: pod1,},ClusterIP:10.96.126.5,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.96.126.5],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:nil,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{},},Conditions:[]Condition{},},}"
I0311 12:55:11.776061       9 queue.go:87] "queuing" item="&Service{ObjectMeta:{service1  testing  b6bea82a-b376-4038-9735-bc1239457c7b 133419 0 2022-03-07 09:50:16 +0000 UTC <nil> <nil> map[app:service1] map[kubectl.kubernetes.io/last-applied-configuration:{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"creationTimestamp\":null,\"labels\":{\"app\":\"service1\"},\"name\":\"service1\",\"namespace\":\"testing\"},\"spec\":{\"ports\":[{\"name\":\"80-80\",\"port\":80,\"protocol\":\"TCP\",\"targetPort\":80}],\"selector\":{\"app\":\"pod2\"},\"type\":\"ClusterIP\"},\"status\":{\"loadBalancer\":{}}}\n] [] []  [{kubectl-client-side-apply Update v1 2022-03-07 10:00:04 +0000 UTC FieldsV1 {\"f:metadata\":{\"f:annotations\":{\".\":{},\"f:kubectl.kubernetes.io/last-applied-configuration\":{}},\"f:labels\":{\".\":{},\"f:app\":{}}},\"f:spec\":{\"f:sessionAffinity\":{}}} } {kubectl-edit Update v1 2022-03-11 12:55:11 +0000 UTC FieldsV1 {\"f:spec\":{\"f:ports\":{\".\":{},\"k:{\\\"port\\\":80,\\\"protocol\\\":\\\"TCP\\\"}\":{\".\":{},\"f:name\":{},\"f:port\":{},\"f:protocol\":{},\"f:targetPort\":{}}},\"f:selector\":{\".\":{},\"f:app\":{}},\"f:type\":{}}} }]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:80-80,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{app: pod1,},ClusterIP:10.96.126.5,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.96.126.5],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:nil,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{},},Conditions:[]Condition{},},}"
I0311 12:55:11.776123       9 queue.go:128] "syncing" key="testing/service1"
I0311 12:55:11.777600       9 controller.go:958] Creating upstream "testing-service1-80"
I0311 12:55:11.777679       9 controller.go:1066] Obtaining ports information for Service "testing/service1"
I0311 12:55:11.777708       9 endpoints.go:77] Getting Endpoints for Service "testing/service1" and port &ServicePort{Name:80-80,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,}
I0311 12:55:11.777736       9 endpoints.go:129] Endpoints found for Service "testing/service1": [{10.244.0.16 80 &ObjectReference{Kind:Pod,Namespace:testing,Name:pod1-758f994ccb-s88sb,UID:5a58274f-e6b5-406d-b9b6-7e46400c69be,APIVersion:,ResourceVersion:111032,FieldPath:,}}]
I0311 12:55:11.777781       9 controller.go:1303] Ingress "testing/ingress1" does not contains a TLS section.
I0311 12:55:11.777840       9 controller.go:694] Replacing location "/" for server "testing.myfakedomain.com" with upstream "upstream-default-backend" to use upstream "testing-service1-80" (Ingress "testing/ingress1")
I0311 12:55:11.777900       9 main.go:175] "Updating ssl expiration metrics"
I0311 12:55:11.777926       9 main.go:180] Updating ssl certificate info metrics
I0311 12:55:11.781976       9 controller.go:201] Dynamic reconfiguration succeeded.
I0311 12:55:11.782290       9 nginx_status.go:168] "starting scraping socket" path="/nginx_status"
I0311 12:55:11.804606       9 socket.go:373] "removing metrics" ingresses=[]
I0311 12:55:11.805113       9 nginx_status.go:168] "starting scraping socket" path="/nginx_status"
I0311 12:55:11.823734       9 nginx_status.go:168] "starting scraping socket" path="/nginx_status"
